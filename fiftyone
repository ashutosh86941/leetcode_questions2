class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> finalAns = new ArrayList<>();
        char board[][] = new char[n][n];
        printans(board,0,finalAns);
        return finalAns;

        
    }

    public void update(char[][] board, List<List<String>> finalAns ){
        List<String> ans = new ArrayList<>();
        String temp = "";
        for(int i =0; i<board.length; i++){
            temp = "";
            for(int j=0; j<board[0].length; j++){
                char ch = board[i][j];
                if(ch == 'Q'){
                    temp += ch;
                }else{
                    temp += '.';
                }
               
            }
            ans.add(temp);

        }
        finalAns.add(ans);
    }

    public void printans(char[][] board, int row, List<List<String>> finalAns){
        if(row == board.length){
            update(board, finalAns);
            return;
        }


        for(int col =0; col<board.length; col++){
            if(isSafe(board,row,col) == true){
            board[row][col] = 'Q';
            printans(board, row+1, finalAns);
            board[row][col] = '.';
            }
        }
    }

    public boolean isSafe(char[][] board, int row,int col){
        for(int i = row-1, j =col; i>=0; i--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        for(int i = row-1, j =col-1; i>=0 && j>=0; i--, j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        for(int i = row-1, j =col+1; i>=0 && j<board.length; i--,j++){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }
}
