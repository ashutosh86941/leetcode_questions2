class Solution {
    public void helper(int[] candidates, int target, int idx, List<List<Integer>> result, List<Integer> list){
        if(target < 0){
            return;
        }
        if(target == 0){
            result.add(new ArrayList<Integer>(list));
            return;
        }
        for(int i =idx; i<candidates.length; i++){
            if(i>idx && candidates[i]==candidates[i-1]){
                continue;
            }
            list.add(candidates[i]);
            helper(candidates,target-candidates[i],i+1,result,list);
            list.remove(list.size()-1);
        }
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList();
        Arrays.sort(candidates);
        helper(candidates,target,0,result, new ArrayList<Integer>());
        return result;
    }
}
