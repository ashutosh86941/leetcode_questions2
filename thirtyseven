class Solution {
    
    public boolean isSafe(char[][] board, int row,int col, int val){

        for(int i = 0; i<board.length; i++){
            if(board[i][col] == (char)(val+'0') ){
                return false;
            }
        }
        for(int j =0; j<board.length; j++){
            if(board[row][j] == (char)(val+'0')){
                return false;
            }
        }

        int ni = 3 * (row/3);
        int nj = 3 * (col/3);
        for(int r = 0; r<3; r++){
            for(int c = 0; c<3; c++){
                if(board[ni+r][c+nj] == (char)(val+'0')){
                    return false;
                }
            }
        }

        return true;
    }

    public boolean helper(char[][] board, int row, int col){
        if(row == board.length){
            return true;
        }

        int ni =0;
        int nj =0;
        if(col == board.length-1){
            ni = row+ 1;
            nj = 0;
        }else{
            nj = col+ 1;
            ni = row;
        }

        
        if(board[row][col] != '.'){
            if(helper(board, ni,nj)){
                return true;
            }
        }else{
            for(int i =1; i<=9; i++){
                if(isSafe(board,row,col,i) == true){
                    board[row][col] = (char)(i+'0');
                    if(helper(board, ni, nj)){
                        return true;
                    }else{
                        board[row][col] = '.';
                    }
                    
                }
            }
            
        }

            

        
        return false;

        
    }
    


    public void solveSudoku(char[][] board) {
        
        helper(board, 0 ,0);
        
        
    }
}
